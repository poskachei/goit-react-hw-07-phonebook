{"version":3,"sources":["components/List/list.module.css","redux/tasks/contactAction.js","redux/tasks/taskReducer.js","redux/store.js","redux/tasks/contactsOperations.js","redux/tasks/contactsSelectors.js","components/Appbar/index.js","components/Form/Form.js","components/List/List.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","contacts","createReducer","contactActions","_","action","payload","state","contact","filter","id","loading","combineReducers","store","configureStore","reducer","contactsReducer","axios","defaults","baseURL","addContact","name","number","dispatch","post","then","data","catch","error","fetchContacts","get","removeContact","delete","getContacts","items","getFilter","createSelector","toLowerCase","includes","contactId","find","item","Appbar","CSSTransition","in","appear","classNames","timeout","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","this","className","onSubmit","htmlFor","type","onChange","Component","mapDispatchToProps","contactsOperation","connect","ContactList","onRemove","TransitionGroup","component","map","key","contactsList","unmountOnExit","onClick","contactAction","contack","PropsTypes","node","string","isRequired","func","onChangeFilter","App","onFetchContacts","isLoadingContacts","contactsOperations","contactsSelectors","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f07d9b7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"list_enter__1cCRk\",\"enterActive\":\"list_enterActive__oHCla\",\"exit\":\"list_exit__1hai1\",\"exitActive\":\"list_exitActive__2gJ2v\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchError\");\r\n\r\nconst removeContactRequest = createAction(\"contacts/removeRequest\");\r\nconst removeContactSuccess = createAction(\"contacts/removeSuccess\");\r\nconst removeContactError = createAction(\"contacts/removeError\");\r\n\r\nconst changeFilter = createAction(\"contacts/filter\");\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  changeFilter,\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactActions from \"./contactAction\";\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload.contact];\r\n};\r\nconst removeContact = (state, action) => {\r\n  return state.filter((contact) => contact.id !== action.payload);\r\n};\r\n\r\nconst contacts = createReducer([], {\r\n  [contactActions.fetchContactsSuccess]: (_, action) => action.payload,\r\n  [contactActions.addContactSuccess]: addContact,\r\n  [contactActions.removeContactSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactActions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactActions.addContactRequest]: () => true,\r\n  [contactActions.addContactSuccess]: () => false,\r\n  [contactActions.addContactError]: () => false,\r\n  [contactActions.fetchContactsRequest]: () => true,\r\n  [contactActions.fetchContactsSuccess]: () => false,\r\n  [contactActions.fetchContactsError]: () => false,\r\n  [contactActions.removeContactRequest]: () => true,\r\n  [contactActions.removeContactSuccess]: () => false,\r\n  [contactActions.removeContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  loading,\r\n  filter,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./tasks/taskReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import axios from \"axios\";\r\nimport contactActions from \"./contactAction\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:2000\";\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  dispatch(contactActions.addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", { name, number })\r\n    .then(({ data }) => dispatch(contactActions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(contactActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(contactActions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(contactActions.fetchContactsError(error)));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactActions.removeContactSuccess(id)))\r\n    .catch((error) => dispatch(contactActions.removeContactError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter)\r\n    );\r\n  }\r\n);\r\n\r\nconst getContactById = createSelector(\r\n  [(_, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => contacts.find((item) => item.id === contactId)\r\n);\r\n\r\nexport default {\r\n  getContacts,\r\n  getFilter,\r\n  getLoading,\r\n  getVisibleContacts,\r\n  getContactById,\r\n};\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./heading.css\";\r\n\r\nconst Appbar = () => (\r\n  <CSSTransition in={true} appear={true} classNames=\"title\" timeout={500}>\r\n    <h1>Phonebook</h1>\r\n  </CSSTransition>\r\n);\r\n\r\nexport default Appbar;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactsOperation from \"../../redux/tasks/contactsOperations\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    if (name && number) {\r\n      this.props.onAddContact(name, number);\r\n      this.setState({ name: \"\", number: \"\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <form className=\"contact-form\" onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n          <label htmlFor=\"phone\">Phone</label>\r\n\r\n          <input\r\n            type=\"text\"\r\n            id=\"phone\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsOperation.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropsTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactAction from \"../../redux/tasks/contactAction\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nimport contactsList from \"./list.module.css\";\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\">\r\n      {contacts.map((contact) => (\r\n        <CSSTransition\r\n          key={contact.id}\r\n          classNames={contactsList}\r\n          timeout={250}\r\n          unmountOnExit\r\n        >\r\n          <li className=\"contacts-item\">\r\n            {contact.name} : {contact.number}\r\n            <button onClick={() => onRemove(contact.id)}> X </button>\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { contacts, filter } = state.contacts;\r\n  const visibleContacts = contacts.filter((contack) =>\r\n    contack.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemove: contactAction.removeContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.PropsTypes = {\r\n  contacts: (PropsTypes.node = {\r\n    id: PropsTypes.string,\r\n    name: PropsTypes.string.isRequired,\r\n    number: PropsTypes.string.isRequired,\r\n  }),\r\n  onRemove: PropsTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactAction from \"../../redux/tasks/contactAction\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <div className=\"filter-container\">\r\n    <label htmlFor=\"filter\">Find contacts by name</label>\r\n    <input\r\n      type=\"text\"\r\n      id=\"filter\"\r\n      value={value}\r\n      onChange={(e) => onChangeFilter(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactAction.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport contactsOperations from \"./redux/tasks/contactsOperations\";\r\nimport contactsSelectors from \"./redux/tasks/contactsSelectors\";\r\n\r\nimport Appbar from \"./components/Appbar/index\";\r\nimport ContactForm from \"./components/Form/Form\";\r\nimport ContactList from \"./components/List/List\";\r\nimport Filter from \"./components/Filter/Filter\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pnohebook-container\">\r\n        {this.props.isLoadingContacts && <h1> LOADING...</h1>}\r\n        <Appbar />\r\n        <ContactForm />\r\n        <Filter />\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}